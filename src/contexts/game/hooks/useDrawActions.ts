
import { Game, Player, DailyDraw } from '../types';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

/**
 * Custom hook for daily draw actions
 */
export const useDrawActions = (
  games: Game[],
  setGames: React.Dispatch<React.SetStateAction<Game[]>>,
  currentGame: Game | null,
  setCurrentGame: React.Dispatch<React.SetStateAction<Game | null>>,
  recalculatePlayerHits: (game: Game) => Game,
  checkWinners: (gameId: string) => Promise<Player[]>
) => {
  const { toast } = useToast();

  /**
   * Add a new daily draw to a game
   */
  const addDailyDraw = async (
    gameId: string,
    draw: { date: string; numbers: number[] }
  ): Promise<DailyDraw> => {
    try {
      // Insert the draw into Supabase
      const { data: drawData, error } = await supabase
        .from('daily_draws')
        .insert({
          game_id: gameId,
          date: draw.date,
          numbers: draw.numbers
        })
        .select()
        .single();

      if (error) throw error;
      if (!drawData) throw new Error('Error adding daily draw');

      // Create new draw with ID generated by Supabase
      const newDraw: DailyDraw = {
        id: drawData.id,
        game_id: gameId,
        date: draw.date,
        numbers: draw.numbers,
        created_at: drawData.created_at
      };

      // Update the local list and recalculate hits
      const gameIndex = games.findIndex(g => g.id === gameId);
      if (gameIndex !== -1) {
        const updatedGame = {
          ...games[gameIndex],
          dailyDraws: [...games[gameIndex].dailyDraws, newDraw]
        };

        // Recalculate all player hits with the new drawn numbers
        const gameWithUpdatedHits = recalculatePlayerHits(updatedGame);

        // Update the games list
        const updatedGames = [...games];
        updatedGames[gameIndex] = gameWithUpdatedHits;
        setGames(updatedGames);
        
        // Update current game if being edited
        if (currentGame && currentGame.id === gameId) {
          setCurrentGame(gameWithUpdatedHits);
        }
        
        // Check if there are winners after adding the new draw
        await checkWinners(gameId);
      }

      return newDraw;
    } catch (error) {
      console.error('Error adding daily draw:', error);
      toast({
        title: "Error adding daily draw",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
      throw error;
    }
  };

  return { addDailyDraw };
};
